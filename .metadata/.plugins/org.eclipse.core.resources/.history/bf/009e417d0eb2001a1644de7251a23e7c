package com.blgy.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.ArrayList;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.sql.DataSource;

import com.blgy.dto.CmtDto;
import com.blgy.dto.PrdDto;
import com.blgy.dto.UserDto;



public class Dao {

	DataSource dataSource;
	
	public Dao() {
	
			// TODO Auto-generated constructor stub
		try {
			Context context = new InitialContext();
			dataSource =(DataSource) context.lookup("java:comp/env/jdbc/blgy");
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	public PrdDto pdDetail(int prdseq) {
		
		//System.out.println("두번째" + rentSeq); OK
		
		PrdDto dtos = new PrdDto();
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		
		try {
			connection = dataSource.getConnection();
			//System.out.println("connection"); OK
			String query = "select p.uploaderseq, u.nickname, p.title, p.price, p.date1, p.date2, p.info, p.image1, p.image2, p.image3, p.image4, p.image5, p.hash, p.insert, p.xaxis, p.yaxis, p.viewed\n" + 
					"	from product p, userdata u where p.uploaderseq = u.userseq AND p.prdseq = ?";
			preparedStatement = connection.prepareStatement(query);
			preparedStatement.setInt(1, prdseq);
			resultSet = preparedStatement.executeQuery();
			
			if (resultSet.next()) {
				
				int uploaderseq = resultSet.getInt("uploaderseq");
				String nickname = resultSet.getString("nickname");
				String title = resultSet.getString("title");
				String price = resultSet.getString("price");
				String date1 = resultSet.getString("date1");
				String date2 =resultSet.getString("date2");
				String info = resultSet.getString("info");
				String image1 = resultSet.getString("image1");
				String image2 = resultSet.getString("image2");
				String image3 = resultSet.getString("image3");
				String image4 = resultSet.getString("image4");
				String image5 = resultSet.getString("image5");
				String hash = resultSet.getString("hash");
				String insert =resultSet.getString("insert");
				String xaxis = resultSet.getString("xaxis");
				String yaxis = resultSet.getString("yaxis");
				int viewed = resultSet.getInt("viewed");
				
//				System.out.println(rentSeq);
//				System.out.println(pName);
//				System.out.println(rentEndPeriod);   OK
				
				dtos.setPrdseq(prdseq);
				dtos.setUploaderseq(uploaderseq);
				dtos.setNickname(nickname);
				dtos.setTitle(title);
				dtos.setPrice(price);
				dtos.setInfo(info);
				dtos.setInsert(insert);
				dtos.setDate1(date1);
				dtos.setDate2(date2);
				dtos.setImage1(image1);
				dtos.setImage2(image2);
				dtos.setImage3(image3);
				dtos.setImage4(image4);
				dtos.setImage5(image5);
				dtos.setHash(hash);
				dtos.setXaxis(xaxis);
				dtos.setYaxis(yaxis);
				dtos.setViewed(viewed);
				

			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if(resultSet != null) resultSet.close();
				if(preparedStatement != null) preparedStatement.close();
				if(connection != null) connection.close();
				
				//선언한 순서 반대로 클로즈 해주어야 에러 안걸림
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return dtos;
		
	}
	
	public UserDto usDetail(int userseq) {
			
			//System.out.println("두번째" + rentSeq); OK
			
			UserDto dtos = new UserDto();
			//System.out.println(userseq);
			
			Connection connection = null;
			PreparedStatement preparedStatement = null;
			ResultSet resultSet = null;
			
			try {
				connection = dataSource.getConnection();
				//System.out.println("connection"); OK
				String query = "SELECT userseq, email, nickname, date FROM userdata where userseq = ?";
				preparedStatement = connection.prepareStatement(query);
				preparedStatement.setInt(1, userseq);
				resultSet = preparedStatement.executeQuery();
				
				if (resultSet.next()) {
					
					String email = resultSet.getString("email");
					String nickname = resultSet.getString("nickname");
					String date = resultSet.getString("date");
					
					
					dtos.setUserseq(userseq);
					dtos.setEmail(email);
					dtos.setNickname(nickname);
					dtos.setDate(date);
					
				}
			} catch(Exception e) {
				e.printStackTrace();
			} finally {
				try {
					if(resultSet != null) resultSet.close();
					if(preparedStatement != null) preparedStatement.close();
					if(connection != null) connection.close();
					
					//선언한 순서 반대로 클로즈 해주어야 에러 안걸림
				} catch(Exception e) {
					e.printStackTrace();
				}
			}
			return dtos;
			
		}
	
	
	public void SendMessage(String mynick, String nickname, String message) {

		Connection connection = null;
		PreparedStatement preparedStatement = null;

		
		try {
			connection = dataSource.getConnection();
			//System.out.println("connection"); OK
			String query = "insert message (nick_receive, nick_send, message, insertdate) values (?, ?, ?, now())";
			preparedStatement = connection.prepareStatement(query);
			preparedStatement.setString(1, nickname);
			preparedStatement.setString(2, mynick);
			preparedStatement.setString(3, message);
			
			preparedStatement.executeUpdate();
			
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
				
				if(preparedStatement != null) preparedStatement.close();
				if(connection != null) connection.close();
				
				//선언한 순서 반대로 클로즈 해주어야 에러 안걸림
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		
	}
		
	public UserDto usInfo(int userseq) {
				
				//System.out.println("두번째" + rentSeq); OK
				
				UserDto dtos = new UserDto();
				//System.out.println(userseq);
				
				Connection connection = null;
				PreparedStatement preparedStatement = null;
				ResultSet resultSet = null;
				
				try {
					connection = dataSource.getConnection();
					//System.out.println("connection"); OK
					String query = "SELECT nickname FROM userdata where userseq = ?";
					preparedStatement = connection.prepareStatement(query);
					preparedStatement.setInt(1, userseq);
					resultSet = preparedStatement.executeQuery();
					
					if (resultSet.next()) {
						
						String usNick = resultSet.getString("nickname");
						
						dtos.setUserseq(userseq);
						dtos.setNickname(usNick);
						
					}
				} catch(Exception e) {
					e.printStackTrace();
				} finally {
					try {
						if(resultSet != null) resultSet.close();
						if(preparedStatement != null) preparedStatement.close();
						if(connection != null) connection.close();
						
						//선언한 순서 반대로 클로즈 해주어야 에러 안걸림
					} catch(Exception e) {
						e.printStackTrace();
					}
				}
				return dtos;
				
			}
		
	public ArrayList<UserDto> messageList(String mynick, String selection, String search, String searchText) {
			
			ArrayList<UserDto> dtos = new ArrayList<UserDto>();
			
			Connection connection = null;
			PreparedStatement preparedStatement = null;
			ResultSet resultSet = null;
			String query = null;
			
			try {
				
				connection = dataSource.getConnection();
				if (selection == null) {
					selection = "total";
				}
				
		
				switch(selection) {
				case "send" : query = "SELECT textseq, nick_send, nick_receive, message, insertdate FROM message where nick_send = '" + mynick + "'"; //센
					break;
				case "receive" : query = "SELECT textseq, nick_send, nick_receive, message, insertdate FROM message where nick_receive = '" + mynick + "'"; //리시
					break;
				case "total"  : query = "SELECT textseq, nick_send, nick_receive, message, insertdate FROM message where nick_receive = '" +  mynick + "' or nick_send = '" +  mynick + "'";
					break;
				}
				
				
				if (search != null) {
					switch(search) {
					case "nick_send" : query = "SELECT textseq, nick_send, nick_receive, message, insertdate FROM message where nick_send like '%" + searchText + "%'"; 
					break;
					case "nick_receive" : query = "SELECT textseq, nick_send, nick_receive, message, insertdate FROM message where nick_receive like '%" + searchText + "%'";
					break;
					case "message" : query = "SELECT textseq, nick_send, nick_receive, message, insertdate FROM message where "
							+ "(nick_receive = '" +  mynick + "' or nick_send = '" +  mynick +"') AND message like '%" + searchText + "%'";
					break;
					}
				}
				//System.out.println(query);
				preparedStatement = connection.prepareStatement(query);
				resultSet = preparedStatement.executeQuery();
				
				while(resultSet.next()) {
					int textseq = resultSet.getInt("textseq");
					String nickname_send = resultSet.getString("nick_send");
					String nickname_receive = resultSet.getString("nick_receive");
					String message = resultSet.getString("message");
					String insertdate = resultSet.getString("insertdate");
					
					
					UserDto dto = new UserDto(textseq, nickname_send, nickname_receive, message, insertdate);
					dtos.add(dto);
				}
			} catch(Exception e) {
				e.printStackTrace();
			} finally {
				try {
					if(resultSet != null) resultSet.close();
					if(preparedStatement != null) preparedStatement.close();
					if(connection != null) connection.close();
					
					//선언한 순서 반대로 클로즈 해주어야 에러 안걸림
				} catch(Exception e) {
					e.printStackTrace();
				}
			}
			
			return dtos;
			
		}
	
	public UserDto msgDetail(int textseq) {
		
		//System.out.println("두번째" + rentSeq); OK
		
		UserDto dtos = new UserDto();
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		
		try {
			connection = dataSource.getConnection();
			//System.out.println("connection"); OK
			String query = "SELECT textseq, nick_send, nick_receive, message, insertdate FROM message where textseq = " + textseq;
			
			preparedStatement = connection.prepareStatement(query);
			resultSet = preparedStatement.executeQuery();
			
			
			if (resultSet.next()) {
				
				String nick_send = resultSet.getString("nick_send");
				String nick_receive = resultSet.getString("nick_receive");
				String message = resultSet.getString("message");
				String insertdate = resultSet.getString("insertdate");
				
				
				dtos.setTextseq(textseq);
				dtos.setNickname_send(nick_send);
				dtos.setNickname_receive(nick_receive);
				dtos.setMessage(message);
				dtos.setDate(insertdate);

			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if(resultSet != null) resultSet.close();
				if(preparedStatement != null) preparedStatement.close();
				if(connection != null) connection.close();
				
				//선언한 순서 반대로 클로즈 해주어야 에러 안걸림
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return dtos;
		
	}
	
	
	public ArrayList<CmtDto> cmtDetail(int prdseq, String mynick) {
		
		ArrayList<CmtDto> dtos = new ArrayList<CmtDto>();
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		String query = "SELECT cmtseq, nickname, comment, insertdate FROM comment where readft = 1 AND prdseq = " + prdseq;
		
		try {
			
			connection = dataSource.getConnection();
			
			//System.out.println(query);
			preparedStatement = connection.prepareStatement(query);
			resultSet = preparedStatement.executeQuery();
			
			while(resultSet.next()) {
				int cmtseq = resultSet.getInt("cmtseq");
				String nickname = resultSet.getString("nickname");
				String comment = resultSet.getString("comment");
				String insertdate = resultSet.getString("insertdate");
				
				CmtDto dto = new CmtDto(cmtseq, nickname, comment, insertdate);
				dtos.add(dto);
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if(resultSet != null) resultSet.close();
				if(preparedStatement != null) preparedStatement.close();
				if(connection != null) connection.close();
				
				//선언한 순서 반대로 클로즈 해주어야 에러 안걸림
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		
		return dtos;
		
	}
	
	public void AddComment(int prdseq, String nickname, String comment) {

		Connection connection = null;
		PreparedStatement preparedStatement = null;

		
		try {
			connection = dataSource.getConnection();
			//System.out.println("connection"); OK
			String query = "insert comment (prdseq, nickname, comment, insertdate) values (?, ?, ?, now())";
			preparedStatement = connection.prepareStatement(query);
			preparedStatement.setInt(1, prdseq);
			preparedStatement.setString(2, nickname);
			preparedStatement.setString(3, comment);
			
			preparedStatement.executeUpdate();
			
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
		
				if(preparedStatement != null) preparedStatement.close();
				if(connection != null) connection.close();
				
				//선언한 순서 반대로 클로즈 해주어야 에러 안걸림
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		
	}
	
	
	public void borrowAct(int prdseq, String nickname, String startDate, String endDate) {

		Connection connection = null;
		PreparedStatement preparedStatement = null;
		
		try {
			connection = dataSource.getConnection();
			//System.out.println("connection"); OK
			String query = "insert borrow (prdseq, nickname, date1, date2, insertdate) values (?, ?, ?, ?, now())";
			preparedStatement = connection.prepareStatement(query);
			preparedStatement.setInt(1, prdseq);
			preparedStatement.setString(2, nickname);
			preparedStatement.setString(3, startDate);
			preparedStatement.setString(4, endDate);
			
			preparedStatement.executeUpdate();
			
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if(preparedStatement != null) preparedStatement.close();
				if(connection != null) connection.close();
				
				//선언한 순서 반대로 클로즈 해주어야 에러 안걸림
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		
	}
	
	
	public String pdlike(int prdseq, int myseq) {
			
			Connection connection = null;
			PreparedStatement preparedStatement = null;
			ResultSet resultSet = null;
			
			String heart = null;
			int liked;
			
			try {
				connection = dataSource.getConnection();
				//System.out.println("connection"); OK
				String query = "SELECT likeseq, liked from interaction where prdseq = ? AND userseq = ? order by likeseq DESC" ;
				
				preparedStatement = connection.prepareStatement(query);
				preparedStatement.setInt(1, prdseq);
				preparedStatement.setInt(2, myseq);
				
				resultSet = preparedStatement.executeQuery();
				
				if (resultSet.next()) {
					liked = resultSet.getInt("liked");
						
						if (liked == 0) {
							heart = "♥";
						} else {
							heart = "♥️";
						}
					
				}
			} catch(Exception e) {
				e.printStackTrace();
			} finally {
				try {
					if(resultSet != null) resultSet.close();
					if(preparedStatement != null) preparedStatement.close();
					if(connection != null) connection.close();
					
					//선언한 순서 반대로 클로즈 해주어야 에러 안걸림
				} catch(Exception e) {
					e.printStackTrace();
				}
			}
			
			return heart;
			
		}
		
	public void commentRUD(int cmtseq, int prdseq, String nickname, String comment) {
		
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		
		try {
			connection = dataSource.getConnection();
			//System.out.println("connection"); OK
			
			String query = "UPDATE comment set readft = 0 where cmtseq = " + cmtseq;
			
			preparedStatement = connection.prepareStatement(query);
			preparedStatement.executeUpdate();

			
			if (prdseq > 0 ) {
				
				query = "insert comment (prdseq, nickname, comment, insertdate) values (?, ?, ?, now())";
				preparedStatement = connection.prepareStatement(query);
				preparedStatement.setInt(1, prdseq);
				preparedStatement.setString(2, nickname);
				preparedStatement.setString(3, comment);
				
				preparedStatement.executeUpdate();
				
	
				
		}
			
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {

				if(preparedStatement != null) preparedStatement.close();
				if(connection != null) connection.close();
				
				//선언한 순서 반대로 클로즈 해주어야 에러 안걸림
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		
	}
	
	public CmtDto cmtCheck(int cmtseq) {
			
			CmtDto dtos = null;
			
			Connection connection = null;
			PreparedStatement preparedStatement = null;
			ResultSet resultSet = null;
			
			try {
				
				connection = dataSource.getConnection();
				
				String query = "SELECT prdseq, nickname, comment, insertdate FROM comment where readft = 1 AND cmtseq = " + cmtseq;
				//System.out.println(query);
				preparedStatement = connection.prepareStatement(query);
				resultSet = preparedStatement.executeQuery();
				
				
				while(resultSet.next()) {
					int prdseq = resultSet.getInt("prdseq");
					String nickname = resultSet.getString("nickname");
					String comment = resultSet.getString("comment");
					String insertdate = resultSet.getString("insertdate");
					
					dtos = new CmtDto(cmtseq, prdseq, nickname, comment, insertdate);

				}
			} catch(Exception e) {
				e.printStackTrace();
			} finally {
				try {
					if(resultSet != null) resultSet.close();
					if(preparedStatement != null) preparedStatement.close();
					if(connection != null) connection.close();
					
					//선언한 순서 반대로 클로즈 해주어야 에러 안걸림
				} catch(Exception e) {
					e.printStackTrace();
				}
			}
			
			return dtos;
			
		}
	
	public void prdDel(int prdseq) {
			
			Connection connection = null;
			PreparedStatement preparedStatement = null;
			
			try {
				connection = dataSource.getConnection();
				//System.out.println("connection"); OK
				
				String query = "DELETE product where prdseq = " + prdseq;
				
				preparedStatement = connection.prepareStatement(query);
				preparedStatement.executeUpdate();
				
			} catch(Exception e) {
				e.printStackTrace();
			} finally {
				try {
	
					if(preparedStatement != null) preparedStatement.close();
					if(connection != null) connection.close();
					
					//선언한 순서 반대로 클로즈 해주어야 에러 안걸림
				} catch(Exception e) {
					e.printStackTrace();
				}
			}
			
		}
	
	public void prdRU(int prdseq, String title, String price, String date1, String date2, String hash, String info) {
			
			Connection connection = null;
			PreparedStatement preparedStatement = null;
			
			try {
				connection = dataSource.getConnection();
				//System.out.println("connection"); OK
				
				String query = "UPDATE product set title = ?, price = ?, date1 = ?, date2 = ?, info = ?, hash = ?, insert = now() where prdseq = " + prdseq;
				
				preparedStatement = connection.prepareStatement(query);
				preparedStatement.setString(1, title);
				preparedStatement.setString(2, price);
				preparedStatement.setString(3, date1);
				preparedStatement.setString(4, date2);
				preparedStatement.setString(5, info);
				preparedStatement.setString(6, hash);
				
				preparedStatement.executeUpdate();
	
				
			} catch(Exception e) {
				e.printStackTrace();
			} finally {
				try {
	
					if(preparedStatement != null) preparedStatement.close();
					if(connection != null) connection.close();
					
					//선언한 순서 반대로 클로즈 해주어야 에러 안걸림
				} catch(Exception e) {
					e.printStackTrace();
				}
			}
			
		}
	
	
}
